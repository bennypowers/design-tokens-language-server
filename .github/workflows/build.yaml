name: Build
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run tests with coverage
        run: make test-coverage

      - uses: codecov/codecov-action@v5
        with:
          files: coverage.out
          token: ${{ secrets.CODECOV_PAT }}

  build-linux-windows:
    name: Build Linux & Windows
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Install cross-compilation toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build Linux binaries
        run: |
          make linux-x64
          make linux-arm64

      - name: Build Windows binaries (Podman)
        run: |
          # Install Podman
          sudo apt-get install -y podman
          make windows-x64

      - name: Upload Linux/Windows binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-linux-windows
          path: dist/bin/design-tokens-language-server-*

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Build macOS binaries
        run: |
          make darwin-x64
          make darwin-arm64

      - name: Upload macOS binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-macos
          path: dist/bin/design-tokens-language-server-*

  build-vscode:
    name: Build VSCode Extension
    runs-on: ubuntu-latest
    needs: [build-linux-windows, build-macos]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: dist/bin/
          pattern: binaries-*
          merge-multiple: true

      - name: List downloaded binaries
        run: ls -lh dist/bin/

      - name: Build VSCode extension
        run: |
          cd extensions/vscode
          npm install
          node build.js
          npm run build

      - name: Upload VSCode extension
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: extensions/vscode/*.vsix

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-vscode]
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize release files
        run: |
          mkdir -p release/bin
          mkdir -p release/vscode
          # Copy binaries
          cp artifacts/binaries-*/* release/bin/ 2>/dev/null || true
          # Copy VSCode extension
          cp artifacts/vscode-extension/*.vsix release/vscode/ 2>/dev/null || true
          ls -lhR release/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.RELEASE_PAT }}
          files: |
            release/bin/*
            release/vscode/*.vsix
